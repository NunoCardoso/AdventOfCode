The trick here is to rotate the whole area 45 degrees so we work with squares instead of diamonds, and use
corners to find the lone beacon instead of line slopes.

to rotate 45 deg counter-clockwise, rotated coordinates of (ùë•,ùë¶) as [(ùë•+ùë¶)/‚àö2, (ùë¶‚àíùë•)/‚àö2]

if I multiply by ‚àö2, I get (x, y) => (x + y, y - x), but then all is zoomed bigger by ‚àö2, which is fine.

I can rotate 45 degrees clockwise again with [(ùë•-ùë¶)/2 , (ùë¶+ùë•)/2]

In part 1, the horizontal line will become a slope (y= mx + b) where m = -1, so  ** y + x is always the same constant **
so, to see if the area of a sensor intercepts the targeted y, it's easy to see if the sensor area corners
(x1,y1 and x2,y2), their sum passes the targeted constant

In part 2, there is a lone beacon. It exists like this, in the edge of 4 areas:

     ‚ñë
    ‚ñë‚ñë‚ñë  ‚ñí
   ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñí‚ñí‚ñí
   ‚ñì‚ñë‚ñë‚ñë‚ñí‚ñí‚ñí‚ñí‚ñí
  ‚ñì‚ñì‚ñì‚ñë ‚ñà‚ñí‚ñí‚ñí
 ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñà‚ñà‚ñà‚ñí
  ‚ñì‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà
   ‚ñì  ‚ñà‚ñà‚ñà
       ‚ñà

With 45 degree rotation, it is visible like this:

        ‚ñí‚ñí‚ñí
     ‚ñë‚ñë‚ñë‚ñí‚ñí‚ñí
     ‚ñë‚ñë‚ñë‚ñí‚ñí‚ñí
     ‚ñë‚ñë‚ñë ‚ñà‚ñà‚ñà
      ‚ñì‚ñì‚ñì‚ñà‚ñà‚ñà
      ‚ñì‚ñì‚ñì‚ñà‚ñà‚ñà
      ‚ñì‚ñì‚ñì

these can be either corner points, or interception points. They will surround the beacon,
as in (50,70), (52,70), (52,72), (50,72) surround the beacon at (51,71).

When I find that point, all I need to do is to convert back to original coordinates.

This solution, of course, assumes the beacon is surrounded by sensors. It does not work if the
beacon is in either the leftmost or rightmost parts of the considered area

The fastest way is to compute those sensor squares, augment by 1, and check if any
of the corners and/or intersects between augmented spares are not included in any of the original squares