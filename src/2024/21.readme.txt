Test units:

✓ <vA is SHORTER than v<A
✓ <^A is SHORTER than ^<A
✓ v>A is SHORTER than >vA
✓ v<A is LONGER than <vA
✓ >vA is LONGER than v>A
✓ >^A is SAME as ^>A
✓ ^<A is LONGER than <^A
✓ ^>A is SAME as >^A

NOTE:

<^A is faster because:
 * takes one expensive step left to the < key
 * then takes two cheap steps right

^<A is slower because:
 * takes two expensive steps left on the keypad
 * then takes one cheap step right

= = =
<^A (3) becomes  v<<A  >^A  >A (9)  becomes  <vA<AA>>^A  vA<^A>A  vA^A (21 => 10 + 7 + 4)
^<A (3) becomes  <A  v<A  >>^A (9)  becomes  v<<A>>^A  <vA<A>>^A  vAA<^A>A (25 => 8 + 9 + 8)

YET, NOTE THAT SOME PATHS like A to 7, you cannot do <<^^^!
The best way is ^^^<< because there is no key below 1.

SO, paths from [A, 0] to [1, 4 7], and the reverse paths, do the "suboptimal" way because there is no key.
the path will always prefer consecutive operations (>>v) instead of alternates (>v>))

for the part2, there was also some trial and error for the keypads, as some of the <v or ^> variants can make
a difference. trial and error until I get the lowest value